Filename: 1488517200_Lynch.txt
Author: Lynch, Nancy
Citation Date: 2017/03/03
Abstract URL: https://arxiv.org//abs/1703.01286
Title: A Layered Architecture for Erasure-Coded Consistent Distributed Storage
Abstract: Motivated by emerging applications to the edge computing paradigm, we
introduce a two-layer erasure-coded fault-tolerant distributed storage system
offering atomic access for read and write operations. In edge computing,
clients interact with an edge-layer of servers that is geographically near; the
edge-layer in turn interacts with a back-end layer of servers. The edge-layer
provides low latency access and temporary storage for client operations, and
uses the back-end layer for persistent storage. Our algorithm, termed Layered
Data Storage (LDS) algorithm, offers several features suitable for
edge-computing systems, works under asynchronous message-passing environments,
supports multiple readers and writers, and can tolerate $f_1 < n_1/2$ and $f_2
< n_2/3$ crash failures in the two layers having $n_1$ and $n_2$ servers,
respectively. We use a class of erasure codes known as regenerating codes for
storage of data in the back-end layer. The choice of regenerating codes,
instead of popular choices like Reed-Solomon codes, not only optimizes the cost
of back-end storage, but also helps in optimizing communication cost of read
operations, when the value needs to be recreated all the way from the back-end.
The two-layer architecture permits a modular implementation of atomicity and
erasure-code protocols; the implementation of erasure-codes is mostly limited
to interaction between the two layers. We prove liveness and atomicity of LDS,
and also compute performance costs associated with read and write operations.
Further, in a multi-object system running $N$ independent instances of LDS,
where only a small fraction of the objects undergo concurrent accesses at any
point during the execution, the overall storage cost is dominated by that of
persistent storage in the back-end layer, and is given by $\Theta(N)$.
